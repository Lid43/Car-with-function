--module script
local module = {}
module.__index = module
module.new = function(carT)
	local thisCar = setmetatable({}, module)
	for k,v in pairs(carT) do
		thisCar[k] = v
	end
	return thisCar
end

local ps = game:GetService("Players")
local tween = game:GetService("TweenService")
local rs = game:GetService("ReplicatedStorage")
local killE = rs.Events.Server.LeaderBoard.KillEvent
local coinE = rs.Events.Server.LeaderBoard.CoinEvent

function module.carDestroy (model)
	coroutine.wrap(function(modelR)
		local descendants = modelR:GetDescendants()
		for _,v in pairs(descendants) do
			if v:IsA("WeldConstraint") or v:IsA("Weld") then
				v:Destroy()
			end
		end
		modelR.PrimaryPart.BreakSound:Play()
		task.wait(10)
		modelR:Destroy()	
	end)(model)
end
 


function module:doorLockF ()
	local doors = self.model.Door:GetChildren()
	if self.doorLock == false then
		for _,v in pairs(doors) do
			v.CanCollide = true
		end
		self.doorLock = true
	elseif self.doorLock == true	 then
		for _,v in pairs(doors) do
			v.CanCollide = false
		end
		self.doorLock = false
	end
end

function module:eject(seatNumber)
	if self.ejectDebounce == false then
		self.ejectDebounce = true
		local roofs = self.model.Roof:GetChildren()
		local seats = self.model.Seats
		local main = self.model.PrimaryPart
		local springSound = main.SpringSound
		local seat = seats:FindFirstChild("Seat"..seatNumber)
		if seat then
			for __, weld in pairs(seat:GetChildren()) do
				if weld:IsA("WeldConstraint") and weld.Name ~= "SeatWeld" then
					weld:Destroy()
				end
			end
			for __, roof in pairs(roofs) do
				roof.CanCollide = false
				roof.Transparency = 1
			end
			task.wait()
			local Vforce = Instance.new("VectorForce")
			Vforce.Parent = seat 
			Vforce.Attachment0 = seat.Attachment
			Vforce.Force = Vector3.new(0,5000,0)
			springSound:Play()
			task.wait(1)
			Vforce:Destroy()
			task.wait(2)
			for __, roof in pairs(roofs) do
				roof.CanCollide = true
				roof.Transparency = 0
			end
			if seatNumber == 0  then
				module.carDestroy(self.model)
			else
				seat:Destroy()
			end
		end
		self.ejectDebounce = false
	end
end


local tCFrame = CFrame.new(1, -0.75, 0)
local oCFrame = CFrame.new(-2, -0.75, 0)
local info = TweenInfo.new(1, Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0)
function module:trunk ()
	local weld = self.model.Back.Trunk.Motor6D
	if self.openTrunk then
		tween:Create(weld,info,{C0 = oCFrame}):Play()
		task.wait(1)
		self.openTrunk = false
	else	
		tween:Create(weld,info,{C0 = tCFrame}):Play()
		task.wait(1)
		self.openTrunk = true
	end
end


function module:flip(flipButton)
	if self.flipDebounce == false then
		self.flipDebounce = true
		flipButton.BrickColor = BrickColor.new("Really red")
		flipButton.AlignOrientation.Enabled = true
		task.wait(1)
		flipButton.AlignOrientation.Enabled = false
		flipButton.BrickColor = BrickColor.new("Lime green")
		self.flipDebounce =false
	end
end

local function getVehicle(part)
	local object = part
	while true do
		local model = object:FindFirstAncestorWhichIsA("Model")
		if model and model.Parent.Parent == game.Workspace.Vehicles then
			return model
		elseif model then
			object = model
		elseif model == nil then
			return nil
		end
	end
end


function module:hit(touchedPart)
	local main
	local velocity
	local humanoid
	local success, errorM = pcall(function()
		main = self.model.PrimaryPart
		velocity = main.AssemblyLinearVelocity.Magnitude
		local char = touchedPart:FindFirstAncestorWhichIsA("Model")
		humanoid = char:FindFirstChildWhichIsA("Humanoid") 
	end)
	if success then
		if not table.find(self.damageTable,humanoid) and humanoid and main.Parent:GetAttribute("Owner") ~= touchedPart:FindFirstAncestorWhichIsA("Model").Name and velocity>10 and  humanoid.Health > 0 then
			table.insert(self.damageTable,humanoid)
			humanoid:TakeDamage(velocity)
			if humanoid.Health <= 0 and self.seat.Occupant then
				local player =  game:GetService("Players"):GetPlayerFromCharacter(self.seat.Occupant.Parent) 
				if player and touchedPart:FindFirstAncestorWhichIsA("Model"):HasTag ("NPC") then
					coinE:Fire(player,touchedPart:FindFirstAncestorWhichIsA("Model"):GetAttribute("Coins"),true)
				elseif player and not touchedPart:FindFirstAncestorWhichIsA("Model"):HasTag ("NPC") then
					killE:Fire(player)
					task.wait(5)
				end 
			end
			task.wait(3)
			table.remove(self.damageTable,table.find(self.damageTable,humanoid))
		elseif touchedPart:IsA("BasePart") and touchedPart:IsDescendantOf(workspace.Vehicles.Car) and velocity >100 and self.explode == false and touchedPart:IsDescendantOf(main.Parent) == false then
			self.explode = true
			local explosion = Instance.new("Explosion")
			explosion.BlastRadius = 20
			explosion.BlastPressure = 5000*130
			explosion.Position = touchedPart.Position
			explosion.DestroyJointRadiusPercent = 0
			module.carDestroy(getVehicle(touchedPart))	
			task.wait(0.2)
			explosion.Parent = touchedPart
			main.ExplosionSound:Play()
			task.wait(2)
			self.explode = false
		end
	end
end


function module:steer (steerFloat)
	local rotation = -(self.maxSteer * steerFloat)
	self.SWHInge.TargetAngle = math.deg(rotation)*3
	self.LSteer.DesiredAngle = rotation
	self.RSteer.DesiredAngle = rotation
end


function module:movement(throttleFloat)
	local movement = throttleFloat * self.maxSpeed
	self.FLMotor.AngularVelocity = movement
	self.FRMotor.AngularVelocity = -movement
	self.BLMotor.AngularVelocity = movement
	self.BRMotor.AngularVelocity = -movement
end

 

function caculateFuel (self)
	local model = self.model
	local label = self.fuelLabel
	if self.boosting and self.fuelLeft > 0 then
		while self.boosting do
			if self.fuelLeft <=0 then
				module.carDestroy(model)
				break
			end
			self.fuelLeft = self.fuelLeft -1
			label.Text = self.fuelLeft
			task.wait(1)
		end
	end
end


function module:boost ()
	local maxT = self.maxT
	local maxA = self.maxA
	if self.boosting == false and self.fuelLeft > 0 then
		self.boosting = true
		self.trail.Enabled = true
		self.maxSpeed = 240
		self.FLMotor.MotorMaxTorque = maxT*2
		self.FRMotor.MotorMaxTorque = maxT*2
		self.BLMotor.MotorMaxTorque = maxT*2
		self.BRMotor.MotorMaxTorque = maxT*2

		self.FLMotor.MotorMaxAcceleration = maxA*2
		self.FRMotor.MotorMaxAcceleration = maxA*2
		self.BLMotor.MotorMaxAcceleration = maxA*2
		self.BRMotor.MotorMaxAcceleration = maxA*2
		module.movement(self,self.seat.ThrottleFloat)
		module.steer(self,self.seat.SteerFloat)
		caculateFuel(self)
	else 
		self.boosting = false
		self.trail.Enabled = false
		self.maxSpeed = 60
		self.FLMotor.MotorMaxTorque = maxT
		self.FRMotor.MotorMaxTorque = maxT
		self.BLMotor.MotorMaxTorque = maxT
		self.BRMotor.MotorMaxTorque = maxT

		self.FLMotor.MotorMaxAcceleration = maxA
		self.FRMotor.MotorMaxAcceleration = maxA
		self.BLMotor.MotorMaxAcceleration = maxA
		self.BRMotor.MotorMaxAcceleration = maxA
		module.movement(self,self.seat.ThrottleFloat)
		module.steer(self,self.seat.SteerFloat)
	end

end

return module









-- car script
local runS = game:GetService("RunService")
local rs = game:GetService("ReplicatedStorage")
local carEventsF = rs.Events.ClientAndServer.Car
local doorLockE = carEventsF.DoorLock
local ejectE = carEventsF.Chair
local model = script.Parent.Parent.Parent
local main = model.Main


local seat = script.Parent
local wheels = model.Wheels
local carT = {
	["model"] = model,
	["seat"] = seat,
	["maxSteer"] = math.rad(18),
	["maxA"] = 500000,
	["maxT"] = 10000,
	["fuelLeft"] = 100,
	["maxSpeed"] = 60,
	["trail"] = model.Back.TrailPart.Trail,
	["doorLock"] = false,
	["openTrunk"] = false,
	["flipDebounce"] = false,
	["explode"] = false,
	["LSteer"] =  wheels.Front.Left.SLeft.Servo,
	["RSteer"] = wheels.Front.Right.SRight.Servo,
	["SWHInge"] = model.functional.SteeringWheel.HingeConstraint,
	["FLMotor"] = wheels.Front.Left.Left.HingeConstraint,
	["FRMotor"] = wheels.Front.Right.Right.HingeConstraint,
	["BLMotor"] = wheels.Back.Left.Left.HingeConstraint,
	["BRMotor"] = wheels.Back.Right.Right.HingeConstraint,
	["boosting"] = false,
	["ejectDebounce"] = false,
	["fuelLabel"] = model.functional.GUI.SurfaceGui.Frame.TextLabel,
	["damageTable"] = {}
}

local moduleScript = require(rs.Cars.functions)
local metaTable = moduleScript.new(carT)


doorLockE.OnServerEvent:Connect(function(playerR)
	if seat.Occupant ~= nil and game:GetService("Players"):GetPlayerFromCharacter(seat.Occupant.Parent) == playerR then
		metaTable:doorLockF()
	end
end)

ejectE.OnServerEvent:Connect(function(playerR,seatNumber)
	if seat.Occupant ~= nil and game:GetService("Players"):GetPlayerFromCharacter(seat.Occupant.Parent) == playerR then
		metaTable:eject(seatNumber)
	end
end)

local trunkE = carEventsF.Trunk
trunkE.OnServerEvent:Connect(function(player)
	if seat.Occupant ~= nil and game:GetService("Players"):GetPlayerFromCharacter(seat.Occupant.Parent) == player then	
		metaTable:trunk()
	end
end)

local hornClick = model.functional.SteeringWheel.Horn.ClickDetector
local hornSound = model.Front.SoundFront.Horn
hornClick.MouseClick:Connect(function()
	hornSound:Play()
end)

local radioE = carEventsF.Radio
local radio = model.functional.Radio
local GUIRadio = radio.stud.SurfaceGui
local indexLabel = radio.button.SurfaceGui.Frame.TextLabel
local soundTable = {}
local  ms = game:GetService("MarketplaceService")
local function ValidateSong(songID) 
	if not songID or not tonumber(songID) then return false end
	local success, result = pcall(function()
		return ms:GetProductInfo(songID)
	end)

	if success and result and result.AssetTypeId == 3 then
		return true
	else
		return false
	end
end
function addSong(soundID)
	GUIRadio.Enabled = false
	GUIRadio.Active = false
	local result = ValidateSong(soundID)
	if result  then
		local sound = Instance.new("Sound")
		sound.Parent = radio.stud
		sound.SoundId = "rbxassetid://"..soundID
		return sound
	end
	return nil
end
radio.stud.ClickDetector.MouseClick:Connect(function()
	GUIRadio.Enabled = true
	GUIRadio.Active = true
end)
radioE.OnServerEvent:Connect(function(player,soundID)
	local result = addSong()
	if result then
		table.insert(soundTable,result)
	end
end)
local soundIndex = 1
radio.button.ClickDetector.MouseClick:Connect(function()
	if #soundTable ~= 0 then
		local sound = soundTable[soundIndex]
		if sound.Playing then
			sound:Stop()
		else
			sound:Play()
		end
		indexLabel.Text = soundIndex
	end
end)
radio.left.ClickDetector.MouseClick:Connect(function()
	if #soundTable ~= 0  then
		if soundIndex == 1 then
			soundIndex = #soundTable
		else
			soundIndex = soundIndex-1
		end
		indexLabel.Text = soundIndex
	end
end)
radio.right.ClickDetector.MouseClick:Connect(function()
	if #soundTable ~= 0  then
		if soundIndex == #soundTable then
			soundIndex =  1
		else
			soundIndex = soundIndex+1
		end
		indexLabel.Text = soundIndex
	end
end)

local breakE = carEventsF.Break
breakE.OnServerEvent:Connect(function(player)
	if seat.Occupant ~= nil and game:GetService("Players"):GetPlayerFromCharacter(seat.Occupant.Parent) == player then
		metaTable.carDestroy(model)
	end	
end)

local flipButton = model.functional.FlipButton
flipButton.ClickDetector.MouseClick:Connect(function()
	metaTable:flip(flipButton)
end)

local fronthitbox = model.functional.Hitbox
local backHitBox = model.functional.BackHitBox
fronthitbox.Touched:Connect(function(touchedPart)
	metaTable:hit(touchedPart)
end)
backHitBox.Touched:Connect(function(touchedPart)
	metaTable:hit(touchedPart)
end)

local engineSound = main.EngineSound
runS.Heartbeat:Connect(function()
	if seat.Occupant then
		local speed = main.AssemblyLinearVelocity.Magnitude
		engineSound.PlaybackSpeed = 0.1 + speed/150
	end
end)
seat:GetPropertyChangedSignal("Occupant"):Connect(function()
	if seat.Occupant then
		engineSound:Play()
	else
		engineSound:Stop()
	end
end)



seat:GetPropertyChangedSignal("SteerFloat"):Connect(function()
	metaTable:steer(seat.SteerFloat)
end)
seat:GetPropertyChangedSignal("ThrottleFloat"):Connect(function()
	metaTable:movement(seat.ThrottleFloat)
end)

boostE = carEventsF.Boost
boostE.OnServerEvent:Connect(function(player)
	if seat.Occupant ~= nil and game:GetService("Players"):GetPlayerFromCharacter(seat.Occupant.Parent) == player then
		metaTable:boost()
	end
end)
